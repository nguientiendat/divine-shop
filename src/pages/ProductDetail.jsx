import { useParams } from "react-router";
import { useState, useEffect, useCallback } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faBox,
  faTag,
  faCreditCard,
  faCartShopping,
  faCheck,
  faImage,
} from "@fortawesome/free-solid-svg-icons";
import Button from "react-bootstrap/Button";
import { Container, Modal } from "react-bootstrap";
import Form from "react-bootstrap/Form";
import { useDispatch } from "react-redux";
import { useNavigate } from "react-router";
import { addToCart } from "../redux/apiRequest";
import { AtomicBlockUtils, CompositeDecorator } from "draft-js";
import { Editor, EditorState, convertFromRaw, convertToRaw } from "draft-js";
import api from "../api/api.js";
import { toast } from "react-toastify";

// Component ƒë·ªÉ render ·∫£nh trong editor
const ImageComponent = (props) => {
  let src = "";
  try {
    const entity = props.contentState.getEntity(props.entityKey);
    src = entity.getData().src;
  } catch (error) {
    console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c src t·ª´ entity:", error);
  }

  console.log("ImageComponent src:", src); // In ra ƒë·ªÉ debug

  return (
    <div style={{ textAlign: "center", margin: "10px 0" }}>
      <img
        src={src}
        alt="·∫¢nh s·∫£n ph·∫©m"
        style={{ maxWidth: "100%", display: "block", margin: "0 auto" }}
        onError={(e) => {
          console.error("L·ªói t·∫£i ·∫£nh:", e);
          e.target.src = "https://via.placeholder.com/400x300?text=L·ªói+t·∫£i+·∫£nh";
          e.target.alt = "L·ªói t·∫£i ·∫£nh";
        }}
      />
    </div>
  );
};

const ProductDetail = () => {
  const { id } = useParams(); // L·∫•y id t·ª´ URL
  const [product, setProduct] = useState(null);
  const [products, setProducts] = useState([]); // M·∫£ng r·ªóng l√† gi√° tr·ªã m·∫∑c ƒë·ªãnh t·ªët h∆°n null
  const [couponCode, setCouponCode] = useState(""); // Th√™m state cho m√£ gi·∫£m gi√°
  const [loading, setLoading] = useState(true); // Th√™m state loading ƒë·ªÉ x√°c ƒë·ªãnh tr·∫°ng th√°i t·∫£i
  const [error, setError] = useState(null); // Th√™m state l·ªói ƒë·ªÉ x·ª≠ l√Ω l·ªói
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  // State cho popup ch√®n ·∫£nh
  const [showImageModal, setShowImageModal] = useState(false);
  const [imageUrl, setImageUrl] = useState("");

  const userData = JSON.parse(localStorage.getItem("user"));
  const accessToken = userData?.accessToken;
  const user = userData?.user_id;

  const dispatch = useDispatch();
  const navigate = useNavigate();
  useEffect(() => {
    setLoading(true);
    setError(null);
    console.log(user);
    api
      .get(`/api/products/${id}`)
      .then((response) => {
        const data = response.data;
        setProduct(data);
        console.log(data);
        // N·∫øu s·∫£n ph·∫©m c√≥ m√¥ t·∫£, hi·ªÉn th·ªã trong editor
        if (data.description) {
          try {
            const contentState = convertFromRaw(data.description);
            setEditorState(
              EditorState.createWithContent(contentState, createDecorator())
            );
          } catch (error) {
            console.error("L·ªói khi parse m√¥ t·∫£ s·∫£n ph·∫©m:", error);
          }
        }
        setLoading(false);
      })
      .catch((error) => {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m:", error);
        setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.");
        setLoading(false);
      });
  }, [id]);
  console.log(user);

  const handleAddToCart = async () => {
    if (!product) return;

    if (!email.trim() || !phone.trim()) {
      setError("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß email v√† s·ªë ƒëi·ªán tho·∫°i!");
      toast.warn("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß email v√† s·ªë ƒëi·ªán tho·∫°i!");
      return;
    }

    if (user === null) {
      toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi th√™m v√†o gi·ªè h√†ng!");
      navigate("/login");
      return;
    }

    setError("");

    try {
      const response = await api.post(
        "/api/cart-items",
        {
          email: email,
          password: phone,
          userId: user,
          productId: id,
        },
        {
          headers: { Authorization: `Bearer ${accessToken}` },
        }
      );

      console.log("Th√™m v√†o gi·ªè th√†nh c√¥ng:", response.data);
      toast.success("üõí ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
    } catch (error) {
      console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
      toast.error("L·ªói khi th√™m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };
  const createDecorator = () => {
    return new CompositeDecorator([
      {
        strategy: (contentBlock, callback, contentState) => {
          contentBlock.findEntityRanges((character) => {
            const entityKey = character.getEntity();
            return (
              entityKey !== null &&
              contentState.getEntity(entityKey).getType() === "IMAGE"
            );
          }, callback);
        },
        component: ImageComponent,
      },
    ]);
  };

  // Kh·ªüi t·∫°o editorState v·ªõi decorator
  const [editorState, setEditorState] = useState(() =>
    EditorState.createEmpty(createDecorator())
  );

  useEffect(() => {
    fetch(`http://localhost:8080/api/products`)
      .then((response) => {
        if (!response.ok) {
          throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m");
        }
        return response.json();
      })
      .then((data) => {
        setProducts(data);
      })
      .catch((error) => {
        console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        // Kh√¥ng set l·ªói chung v√¨ ƒë√¢y ch·ªâ l√† t√≠nh nƒÉng ph·ª•
      });
  }, []);

  // X·ª≠ l√Ω mua ngay
  const handleBuyNow = () => {
    if (!product) return;

    const data = {
      id: product.id,
      name: product.name,
      price: product.price,
      original_price: product.original_price,
      discount: product.discount,
      src: product.src,
    };
    addToCart(data, dispatch, navigate);
    navigate("/checkout"); // Chuy·ªÉn ƒë·∫øn trang thanh to√°n
  };

  // X·ª≠ l√Ω m√£ gi·∫£m gi√°
  const handleApplyCoupon = () => {
    if (!couponCode.trim()) {
      alert("Vui l√≤ng nh·∫≠p m√£ gi·∫£m gi√°!");
      return;
    }

    // G·ªçi API ki·ªÉm tra m√£ gi·∫£m gi√° (gi·∫£ ƒë·ªãnh)
    console.log("√Åp d·ª•ng m√£ gi·∫£m gi√°:", couponCode);
    // Th√™m code x·ª≠ l√Ω m√£ gi·∫£m gi√° ·ªü ƒë√¢y
    alert(`ƒê√£ √°p d·ª•ng m√£ gi·∫£m gi√°: ${couponCode}`);
  };

  // H√†m m·ªü modal ch√®n ·∫£nh
  const openImageModal = () => {
    setImageUrl("");
    setShowImageModal(true);
  };

  // H√†m ƒë√≥ng modal ch√®n ·∫£nh
  const closeImageModal = () => {
    setShowImageModal(false);
  };

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng x√°c nh·∫≠n ch√®n ·∫£nh
  const handleInsertImage = () => {
    if (!imageUrl || imageUrl.trim() === "") {
      alert("Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh!");
      return;
    }

    // Ki·ªÉm tra xem URL c√≥ ph·∫£i l√† ·∫£nh kh√¥ng
    const img = new Image();
    img.onload = function () {
      // ·∫¢nh t·∫£i th√†nh c√¥ng - ch√®n v√†o editor
      insertImage(imageUrl);
      closeImageModal();
    };
    img.onerror = function () {
      // L·ªói t·∫£i ·∫£nh
      alert(
        "URL ·∫£nh kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ t·∫£i ƒë∆∞·ª£c. Vui l√≤ng ki·ªÉm tra l·∫°i!"
      );
    };
    img.src = imageUrl;
  };

  // H√†m ch√®n ·∫£nh v√†o editor ƒë√£ ƒë∆∞·ª£c c·∫£i ti·∫øn
  const insertImage = (imgUrl) => {
    if (!imgUrl) return;

    try {
      new URL(imgUrl); // Validate URL
    } catch (e) {
      console.error("URL ·∫£nh kh√¥ng h·ª£p l·ªá:", e);
      alert("URL ·∫£nh kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i!");
      return;
    }

    try {
      const contentState = editorState.getCurrentContent();
      const contentStateWithEntity = contentState.createEntity(
        "IMAGE",
        "IMMUTABLE",
        { src: imgUrl }
      );
      const entityKey = contentStateWithEntity.getLastCreatedEntityKey();

      const newEditorState = EditorState.push(
        editorState,
        contentStateWithEntity,
        "apply-entity"
      );

      const updatedEditorState = AtomicBlockUtils.insertAtomicBlock(
        newEditorState,
        entityKey,
        " "
      );

      setEditorState(updatedEditorState);
    } catch (error) {
      console.error("L·ªói khi ch√®n ·∫£nh:", error);
      alert("C√≥ l·ªói x·∫£y ra khi ch√®n ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi n·ªôi dung trong editor
  const onEditorStateChange = (newEditorState) => {
    setEditorState(newEditorState);
  };

  // H√†m x·ª≠ l√Ω block renderer cho atomic blocks (·∫£nh)
  const blockRendererFn = useCallback(
    (contentBlock) => {
      if (contentBlock.getType() === "atomic") {
        const entityKey = contentBlock.getEntityAt(0);
        if (entityKey) {
          try {
            const contentState = editorState.getCurrentContent();
            // Ki·ªÉm tra xem contentState c√≥ t·ªìn t·∫°i v√† hasEntity l√† m·ªôt h√†m
            if (contentState && typeof contentState.hasEntity === "function") {
              // Sau ƒë√≥ m·ªõi g·ªçi hasEntity
              if (contentState.hasEntity(entityKey)) {
                const entity = contentState.getEntity(entityKey);
                if (entity && entity.getType() === "IMAGE") {
                  const { src } = entity.getData();
                  console.log("Rendering image:", src); // Debug log
                  return {
                    component: ImageComponent,
                    editable: false,
                    props: { src },
                  };
                }
              }
            } else {
              console.warn(
                "ContentState ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng ho·∫∑c thi·∫øu ph∆∞∆°ng th·ª©c hasEntity"
              );
            }
          } catch (error) {
            console.error("Error in blockRendererFn:", error);
            return null;
          }
        }
      }
      return null;
    },
    [editorState]
  );

  // H√†m l∆∞u m√¥ t·∫£ s·∫£n ph·∫©m
  const saveDescription = async () => {
    if (!product) {
      alert("Kh√¥ng c√≥ th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t!");
      return;
    }

    try {
      const rawContent = convertToRaw(editorState.getCurrentContent());

      // C·∫≠p nh·∫≠t m√¥ t·∫£ cho s·∫£n ph·∫©m hi·ªán t·∫°i
      const productData = {
        ...product,
        description: rawContent,
      };

      const response = await fetch(`http://localhost:5000/products/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(productData),
      });

      if (!response.ok) {
        throw new Error("L·ªói khi c·∫≠p nh·∫≠t m√¥ t·∫£ s·∫£n ph·∫©m");
      }

      const data = await response.json();
      console.log("ƒê√£ c·∫≠p nh·∫≠t m√¥ t·∫£ s·∫£n ph·∫©m:", data);
      alert("C·∫≠p nh·∫≠t m√¥ t·∫£ th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói:", error);
      alert("L·ªói khi c·∫≠p nh·∫≠t m√¥ t·∫£: " + error.message);
    }
  };

  // Hi·ªÉn th·ªã m√†n h√¨nh loading
  if (loading) {
    return (
      <Container
        className="d-flex justify-content-center align-items-center"
        style={{ minHeight: "300px" }}
      >
        <div className="text-center">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">ƒêang t·∫£i...</span>
          </div>
          <p className="mt-2">ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...</p>
        </div>
      </Container>
    );
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  if (error) {
    return (
      <Container
        className="d-flex justify-content-center align-items-center"
        style={{ minHeight: "300px" }}
      >
        <div className="text-center">
          <div className="alert alert-danger" role="alert">
            {error}
          </div>
          <Button variant="primary" onClick={() => window.location.reload()}>
            Th·ª≠ l·∫°i
          </Button>
        </div>
      </Container>
    );
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
  if (!product) {
    return (
      <Container
        className="d-flex justify-content-center align-items-center"
        style={{ minHeight: "300px" }}
      >
        <div className="text-center">
          <div className="alert alert-warning" role="alert">
            Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m
          </div>
          <Button variant="primary" onClick={() => navigate("/products")}>
            Quay l·∫°i danh s√°ch s·∫£n ph·∫©m
          </Button>
        </div>
      </Container>
    );
  }

  return (
    <Container>
      <div className="d-flex my-4 py-3 b bg-white justify-content-between flex-wrap">
        <div className="mb-3 mb-md-0">
          <img
            className="ct-img2 rounded"
            src={product.result.avatarUrl}
            alt={product.name}
          />
        </div>
        <div className="px-4 mb-3 mb-md-0">
          <p className="m-0">S·∫£n ph·∫©m</p>
          <h3>{product.result.name}</h3>
          <p>
            {" "}
            <FontAwesomeIcon icon={faBox} /> T√¨nh tr·∫°ng:{" "}
            <span className="ct-color-green">
              C√≤n {product.result.quantity} s·∫£n ph·∫©m
            </span>
          </p>
          <p>
            <FontAwesomeIcon icon={faTag} /> Th·ªÉ lo·∫°i: App, Gi·∫£i tr√≠, Game
          </p>
          <h4>
            {product.result.price
              ? (
                  product.result.price -
                  (product.result.price * product.result.discount) / 100
                ).toLocaleString("vi-VN")
              : "Loading...!"}
            ƒë
          </h4>
          <div className="d-flex align-items-center">
            <h5 className="ct-c m-0">
              {product.result.price
                ? product.result.price.toLocaleString("vi-VN")
                : "Loading...!"}
              ƒë{" "}
            </h5>
            <span className="sale rounded fw-bold mx-2 p-1">
              -{product.result.discount}%
            </span>
          </div>
          <div>
            <div className="border w-100 my-3"></div>
            <form className="DesInfo">
              <div className="mb-3">
                <label htmlFor="email" className="form-label">
                  Email
                </label>
                <input
                  type="email"
                  className="form-control"
                  id="email"
                  placeholder="Nh·∫≠p email mu·ªën nh·∫≠n t√†i kho·∫£n"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
              </div>
              <div className="mb-3">
                <label htmlFor="phone" className="form-label">
                  S·ªë ƒëi·ªán tho·∫°i
                </label>
                <input
                  type="tel"
                  className="form-control"
                  id="phone"
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                />
              </div>
            </form>
          </div>
          <div className="border w-100 my-3"></div>
          <div>
            <Button
              type="button"
              className="ctm-btn-3 no-hover me-2 mb-2"
              onClick={handleBuyNow}
            >
              <FontAwesomeIcon icon={faCreditCard} /> Mua Ngay
            </Button>
            <Button
              type="button"
              className="ctm-btn-3 no-hover bg-white t-blue border mb-2"
              onClick={handleAddToCart}
            >
              <FontAwesomeIcon icon={faCartShopping} /> Th√™m v√†o gi·ªè H√†ng
            </Button>
          </div>
        </div>
        <div>
          <h5>M√£ gi·∫£m gi√°</h5>
          <div className="d-flex ct-input">
            <Form.Control
              type="text"
              placeholder="M√£ gi·∫£m gi√°"
              className="mr-sm-2"
              value={couponCode}
              onChange={(e) => setCouponCode(e.target.value)}
            />
            <Button
              type="button"
              className="ctm-btn mx-2"
              onClick={handleApplyCoupon}
            >
              <FontAwesomeIcon icon={faCheck} />
            </Button>
          </div>
        </div>
      </div>

      <div className="mb-5">
        <h3>M√¥ t·∫£ s·∫£n ph·∫©m</h3>
        <button className="btn btn-secondary mb-2" onClick={openImageModal}>
          <FontAwesomeIcon icon={faImage} className="me-2" /> Ch√®n ·∫£nh
        </button>
        <div className="border p-3 mb-3">
          <Editor
            editorState={editorState}
            onChange={onEditorStateChange}
            placeholder="Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m..."
            blockRendererFn={blockRendererFn}
          />
        </div>
        <button className="btn btn-primary" onClick={saveDescription}>
          L∆∞u m√¥ t·∫£
        </button>

        {/* Modal ch√®n ·∫£nh */}
        <Modal show={showImageModal} onHide={closeImageModal} centered>
          <Modal.Header closeButton>
            <Modal.Title>Ch√®n ·∫£nh</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form.Group className="mb-3">
              <Form.Label>ƒê∆∞·ªùng d·∫´n ·∫£nh (URL)</Form.Label>
              <Form.Control
                type="text"
                placeholder="Nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh..."
                value={imageUrl}
                onChange={(e) => setImageUrl(e.target.value)}
                autoFocus
              />
              <Form.Text className="text-muted">
                Nh·∫≠p ƒë∆∞·ªùng d·∫´n URL c·ªßa ·∫£nh b·∫°n mu·ªën ch√®n v√†o m√¥ t·∫£ s·∫£n ph·∫©m
              </Form.Text>
            </Form.Group>

            {/* Xem tr∆∞·ªõc ·∫£nh */}
            {imageUrl && (
              <div className="mt-3 text-center">
                <p className="mb-2">Xem tr∆∞·ªõc:</p>
                <img
                  src={imageUrl}
                  alt="Xem tr∆∞·ªõc"
                  style={{
                    maxWidth: "100%",
                    maxHeight: "200px",
                    border: "1px solid #ddd",
                  }}
                  onError={(e) => {
                    e.target.src =
                      "https://via.placeholder.com/400x300?text=L·ªói+t·∫£i+·∫£nh";
                    e.target.alt = "L·ªói t·∫£i ·∫£nh";
                  }}
                />
              </div>
            )}
          </Modal.Body>
          <Modal.Footer>
            <Button variant="secondary" onClick={closeImageModal}>
              H·ªßy
            </Button>
            <Button variant="primary" onClick={handleInsertImage}>
              Ch√®n ·∫£nh
            </Button>
          </Modal.Footer>
        </Modal>
      </div>

      {/* Ph·∫ßn s·∫£n ph·∫©m li√™n quan */}
      {products.length > 0 && (
        <div className="mb-5">
          <h3>S·∫£n ph·∫©m li√™n quan</h3>
          <div className="row">
            {products
              .filter((p) => p.id !== product.id) // Lo·∫°i b·ªè s·∫£n ph·∫©m hi·ªán t·∫°i
              .slice(0, 4) // Ch·ªâ l·∫•y 4 s·∫£n ph·∫©m
              .map((relatedProduct) => (
                <div key={relatedProduct.id} className="col-md-3 col-6 mb-3">
                  <div className="card h-100">
                    <img
                      src={relatedProduct.src}
                      className="card-img-top"
                      alt={relatedProduct.name}
                      style={{ height: "200px", objectFit: "cover" }}
                      onError={(e) => {
                        e.target.src =
                          "https://via.placeholder.com/200x200?text=S·∫£n+ph·∫©m";
                      }}
                    />
                    <div className="card-body">
                      <h5 className="card-title">{relatedProduct.name}</h5>
                      <p className="card-text fw-bold">
                        {relatedProduct.price}ƒë
                      </p>
                      <button
                        className="btn btn-sm btn-outline-primary"
                        onClick={() =>
                          navigate(`/${relatedProduct.id}/product-detail`)
                        }
                      >
                        Xem chi ti·∫øt
                      </button>
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </div>
      )}
    </Container>
  );
};

export default ProductDetail;
