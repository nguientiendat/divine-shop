const Cart = require('../models/cartModel');
console.log('Cart model:', Cart);  // ki·ªÉm tra xem n√≥ l√† object c√≥ method hay undefined

exports.addItem = async (req, res) => {
    const { userId } = req.params;
    console.log('Request body:', req.body); // Log to√†n b·ªô request body
    const { product_id } = req.body; // L·∫•y product_id t·ª´ request body
    
    // Ki·ªÉm tra n·∫øu product_id kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng h·ª£p l·ªá
    if (!product_id) {
        return res.status(400).json({ 
            error: "Thi·∫øu th√¥ng tin product_id",
            receivedBody: req.body // Log ƒë·ªÉ debug
        });
    }
    
    // Ki·ªÉm tra xem product_id c√≥ ph·∫£i l√† ObjectId h·ª£p l·ªá kh√¥ng
    const mongoose = require('mongoose');
    if (!mongoose.Types.ObjectId.isValid(product_id)) {
        return res.status(400).json({
            error: "product_id kh√¥ng h·ª£p l·ªá, ph·∫£i l√† ObjectId",
            product_id: product_id
        });
    }

    try {
        let cart = await Cart.findOne({ user_id: userId });

        if (!cart) {
            // T·∫°o gi·ªè h√†ng m·ªõi v·ªõi m·∫£ng items
            console.log('T·∫°o gi·ªè h√†ng m·ªõi v·ªõi product_id:', product_id);
            cart = new Cart({
                user_id: userId,
                items: [{ product_id: product_id }] // ƒê·∫£m b·∫£o truy·ªÅn product_id ƒë√∫ng c√°ch
            });
        } else {
            // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a
            const itemIndex = cart.items.findIndex(item =>
                item.product_id && item.product_id.toString() === product_id.toString()
            );
            
            if (itemIndex >= 0) {
                // N·∫øu c√≥ r·ªìi th√¨ t·∫°m th·ªùi kh√¥ng l√†m g√¨ (sau n√†y c√≥ th·ªÉ th√™m quantity)
                // cart.items[itemIndex].quantity += quantity;
            } else {
                // N·∫øu ch∆∞a c√≥ th√¨ th√™m m·ªõi
                console.log('Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng:', product_id);
                const newItem = { product_id: product_id }; // T·∫°o object item m·ªõi
                cart.items.push(newItem);
                console.log('M·∫£ng items sau khi th√™m:', cart.items);
            }
        }
        
        // C·∫≠p nh·∫≠t th·ªùi gian update
        cart.update_at = Date.now();
        
        await cart.save();
        res.status(200).json(cart);
    } catch (err) {
        console.error("L·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng:", err);
        res.status(500).json({ err: err.message });
    }
}
exports.getItem = async (req, res) => {
    const { userId } = req.params;

    try {
        const cart = await Cart.findOne({ user_id: userId }).populate('items.product_id');

        if (!cart) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
        }

        res.status(200).json(cart);
    } catch (err) {
        console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", err);
        res.status(500).json({ error: err.message });
    }
};

exports.removeItem = async (req, res) => {
    const { userId, productId: product_id } = req.params;
    // const {  } = req.params;

    console.log("‚û°Ô∏è Params:", req.params);
    console.log(product_id)
    console.log(userId)
    try {
        const cart = await Cart.findOne({ user_id: userId });
        
        if (!cart) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng!");
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
        }
        // In ra tr∆∞·ªõc khi l·ªçc
        console.log("üõí Tr∆∞·ªõc khi x√≥a:", cart.items);

        const initialLength = cart.items.length;
        console.log("Tong so san pham trong gio hang: ",initialLength)
        // Xo√° item c√≥ product_id
        cart.items = cart.items.filter(item => item.product_id.toString() !== product_id);

        // Ki·ªÉm tra c√≥ th·ª±c s·ª± x√≥a g√¨ kh√¥ng
        if (cart.items.length === initialLength) {
            console.log("‚ö†Ô∏è Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o b·ªã x√≥a (kh√¥ng t√¨m th·∫•y product_id ph√π h·ª£p)");
            return res.status(400).json({ error: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng ƒë·ªÉ x√≥a" });
        }

        await cart.save();

        console.log("‚úÖ ƒê√£ x√≥a xong. Sau khi x√≥a:", cart.items);
        return res.status(200).json({ message: "ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng", cart });

    } catch (err) {
        console.error("üí• L·ªói khi x√≥a s·∫£n ph·∫©m:", err);
        return res.status(500).json({ error: "ƒê√£ c√≥ l·ªói x·∫£y ra tr√™n server" });
    }
};